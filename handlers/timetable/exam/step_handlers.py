from create_env import bot
from database_queries import insert_action, send_exam_timetable
from ...helpers import schedule_string, today_tomorrow_keyboard
from ...states import Exam

from aiogram import types
from aiogram.dispatcher import FSMContext


async def initiate(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º '/exam'.
    –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ –≤—Ä–µ–º—è —Å–µ–º–µ—Å—Ç—Ä–∞ (–Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏).
    """
    await insert_action("exam", message.chat.id)
    await bot.send_chat_action(message.chat.id, "typing")  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await bot.send_message(message.chat.id, "–ï—â—ë –Ω–µ –≤—Ä–µ–º—è... –ù–æ —Ç—ã –Ω–µ –∑–∞–±—ã–≤–∞–π...")
    await bot.send_chat_action(message.chat.id, "typing")  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await bot.send_sticker(
        message.chat.id,
        "CAACAgIAAxkBAAMEXj8IxnJkYATlpAOTkJyLiXH2u0UAAvYfAAKiipYBsZcZ_su45LkYBA",
    )


# async def initiate(message: types.Message):
#     """
#     –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º '/exam'.
#     –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –æ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã.
#     """
#     await insert_action("exam", message.chat.id)
#     await bot.send_chat_action(message.chat.id, "typing")  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     keyboard.add(
#         *[
#             types.KeyboardButton(name)
#             for name in ["–ú–æ—è –≥—Ä—É–ø–ø–∞", "–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞", "–í—ã—Ö–æ–¥"]
#         ]
#     )
#     await bot.send_message(
#         message.chat.id,
#         "–≠—Ç–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç–∞–ª–æ... –í—ã–±–µ—Ä–∏, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤"
#         " –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å)",
#         reply_markup=keyboard,
#     )
#     await Exam.choose.set()


async def choose_my_group_and_send_schedule(message: types.Message, state: FSMContext):
    timetable = await send_exam_timetable(my_group=True, chat_id=message.chat.id)
    if timetable[0]:  # –µ—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ
        if timetable[1][0] is not None:
            await bot.send_message(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                message.chat.id,
                schedule_string(timetable[1][0]),
                parse_mode="HTML",
            )
            await bot.send_chat_action(
                message.chat.id, "typing"
            )  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
            await bot.send_message(
                message.chat.id,
                "–ß–µ–º –µ—â—ë —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
                reply_markup=today_tomorrow_keyboard(),
            )
            await state.finish()  # –≤—ã–∫–ª—é—á–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        else:  # –µ—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞—à–ª–æ—Å—å
            await bot.send_message(
                message.chat.id,
                "–ò–∑–≤–∏–Ω–∏, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –º—ã –Ω–µ –Ω–∞—à–ª–∏,"
                " –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)",
                reply_markup=today_tomorrow_keyboard(),
            )
            await state.finish()
    # –µ—Å–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif not timetable[0] and timetable[1] == "empty_result":
        await bot.send_message(
            message.chat.id,
            "–ö–∞–∂–µ—Ç—Å—è, –º—ã —Å —Ç–æ–±–æ–π –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã... üò¢\nC–∫–æ—Ä–µ–π –ø–∏—à–∏ –º–Ω–µ /start!",
            reply_markup=today_tomorrow_keyboard(),
        )
        await state.finish()  # –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–∫–ª—é—á–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    # –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    else:
        await bot.send_message(
            message.chat.id,
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)",
            reply_markup=today_tomorrow_keyboard(),
        )
        await state.finish()


async def choose_another_group_proceed(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º '–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞' –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å –æ –Ω–æ–º–µ—Ä–µ –≥—Ä—É–ø–ø—ã.
    """
    await bot.send_chat_action(message.chat.id, "typing")  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await Exam.another_group.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Timetable.another_group
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        *[types.KeyboardButton(name) for name in ["–í—ã—Ö–æ–¥"]]
    )  # –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    await bot.send_message(
        message.chat.id,  # –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
        "–ù–µ –ø–æ–¥—Å–∫–∞–∂–µ—à—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã?\n(–í —Ñ–æ—Ä–º–∞—Ç–µ –ë00‚Äì228 –∏–ª–∏ 777, –∫–∞–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏)",
        reply_markup=keyboard,
    )


async def another_group_send_schedule(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ. –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –µ—â–µ —Ä–∞–∑.
    """
    timetable = await send_exam_timetable(another_group=message.text)
    await bot.send_chat_action(message.chat.id, "typing")  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    if timetable[0]:
        if timetable[1][0] is not None:
            await bot.send_message(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                message.chat.id,
                schedule_string(timetable[1][0]),
                parse_mode="HTML",
            )
            await bot.send_chat_action(
                message.chat.id, "typing"
            )  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
            await bot.send_message(
                message.chat.id,
                "–ß–µ–º –µ—â—ë —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
                reply_markup=today_tomorrow_keyboard(),
            )
            await state.finish()  # –≤—ã–∫–ª—é—á–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        else:  # –µ—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞—à–ª–æ—Å—å
            await bot.send_message(
                message.chat.id,
                "–ò–∑–≤–∏–Ω–∏, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –º—ã –Ω–µ –Ω–∞—à–ª–∏,"
                " –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)",
                reply_markup=today_tomorrow_keyboard(),
            )
            await state.finish()
    # –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ –±–∞–∑–µ / –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
    elif not timetable[0] and timetable[1] == "connection_error":
        await bot.send_message(
            message.chat.id,
            "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)",
            reply_markup=today_tomorrow_keyboard(),
        )
        await state.finish()
    # –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –¥—Ä—É–≥–æ–≥–æ —Ä–æ–¥–∞
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ["–í—ã—Ö–æ–¥"]])
        await bot.send_message(  # –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –µ—â–µ —Ä–∞–∑
            message.chat.id,
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã(\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)",
            reply_markup=keyboard,
        )
