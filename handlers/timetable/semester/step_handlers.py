from create_env import bot
from database_queries import insert_action, send_timetable
from ...helpers import schedule_string, today_tomorrow_keyboard
from ...states import Timetable

from aiogram import types
from aiogram.dispatcher import FSMContext


async def initiate(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "/timetable".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –∏–ª–∏ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã –µ–º—É –Ω—É–∂–Ω–æ.
    """
    await insert_action("timetable", message.chat.id)
    await Timetable.choose.set()  # —Å—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Timetable.choose
    await bot.send_chat_action(message.chat.id, "typing")  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await bot.send_message(
        message.chat.id,
        "–°–Ω–æ–≤–∞ –Ω–µ –º–æ–∂–µ—à—å –≤—Å–ø–æ–º–Ω–∏—Ç—å, –∫–∞–∫–∞—è –ø–∞—Ä–∞ —Å–ª–µ–¥—É—é—â–∞—è?\n–ù–∏—á–µ–≥–æ, —è —É–∂–µ —Ç—É—Ç! üòâ",
    )
    await bot.send_chat_action(message.chat.id, "typing")  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ["–õ–∏—á–Ω–æ–µ", "–ú–æ—è –≥—Ä—É–ø–ø–∞"]])
    keyboard.add(*[types.KeyboardButton(name) for name in ["–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞", "–í—ã—Ö–æ–¥"]])
    await bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ)",
        reply_markup=keyboard,
    )


async def choose_another_type_proceed(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º '–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞' –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å –æ –Ω–æ–º–µ—Ä–µ –≥—Ä—É–ø–ø—ã.
    """
    await bot.send_chat_action(message.chat.id, "typing")  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await Timetable.another_group.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Timetable.another_group
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        *[types.KeyboardButton(name) for name in ["–í—ã—Ö–æ–¥"]]
    )  # –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    await bot.send_message(
        message.chat.id,  # –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
        "–ù–µ –ø–æ–¥—Å–∫–∞–∂–µ—à—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã?\n(–í —Ñ–æ—Ä–º–∞—Ç–µ –ë00‚Äì228 –∏–ª–∏ 777, –∫–∞–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏)",
        reply_markup=keyboard,
    )


async def choose_my_group_custom_type_proceed(
    message: types.Message, state: FSMContext
):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω—É–∂–Ω–æ–≥–æ –µ–º—É –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å –æ –Ω—É–∂–Ω–æ–º –¥–Ω–µ –Ω–µ–¥–µ–ª–∏. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ª–∏—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    """
    await bot.send_chat_action(message.chat.id, "typing")  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    timetable = (
        await send_timetable(custom=True, chat_id=message.chat.id)
        if message.text == "–õ–∏—á–Ω–æ–µ"
        else await send_timetable(my_group=True, chat_id=message.chat.id)
    )
    if timetable[0]:  # –µ—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ
        if timetable[1][0] is not None and timetable[1][0] != "DEFAULT":
            await Timetable.weekday.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Timetable.weekday
            async with state.proxy() as data:
                data["schedule"] = timetable[1][0]  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            # –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ç—ã–∫–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ (—Å—Ç—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–Ω—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å–ª–æ–≤)
            keyboard.add(*[types.KeyboardButton(name) for name in ["–ù–∞ –Ω–µ–¥–µ–ª—é"]])
            keyboard.add(
                *[types.KeyboardButton(name) for name in ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫"]]
            )
            keyboard.add(*[types.KeyboardButton(name) for name in ["–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥"]])
            keyboard.add(
                *[types.KeyboardButton(name) for name in ["–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]]
            )
            keyboard.add(
                *[types.KeyboardButton(name) for name in ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–í—ã—Ö–æ–¥"]]
            )
            await bot.send_message(
                message.chat.id,
                "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?",
                reply_markup=keyboard,
            )
        elif timetable[1][0] is not None and timetable[1][0] == "DEFAULT":
            await bot.send_message(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                message.chat.id,
                "–í —ç—Ç–æ–º —Å–µ–º–µ—Å—Ç—Ä–µ –Ω–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã( "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –≤ /profile üòâ",
                reply_markup=today_tomorrow_keyboard(),
            )
            await state.finish()
        else:
            if message.text == "–õ–∏—á–Ω–æ–µ":
                await bot.send_message(
                    message.chat.id,
                    "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–≤–æ–µ –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üòû\n"
                    "–ù–∞–∂–º–∏ /custom —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.",
                    reply_markup=today_tomorrow_keyboard(),
                )
            else:
                await bot.send_message(
                    message.chat.id,
                    "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã üòû\n"
                    "–ù–∞–∂–º–∏ /profile —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.",
                    reply_markup=today_tomorrow_keyboard(),
                )
            await state.finish()
    # –µ—Å–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif not timetable[0] and timetable[1] == "empty_result":
        await bot.send_message(
            message.chat.id,
            "–ö–∞–∂–µ—Ç—Å—è, –º—ã —Å —Ç–æ–±–æ–π –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã... üò¢\nC–∫–æ—Ä–µ–π –ø–∏—à–∏ –º–Ω–µ /start!",
            reply_markup=today_tomorrow_keyboard(),
        )
        await state.finish()  # –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–∫–ª—é—á–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    # –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    else:
        await bot.send_message(
            message.chat.id,
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)",
            reply_markup=today_tomorrow_keyboard(),
        )
        await state.finish()


async def another_type_group_number_proceed(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ. –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å –æ –¥–Ω–µ –Ω–µ–¥–µ–ª–∏. –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –µ—â–µ —Ä–∞–∑.
    """
    timetable = await send_timetable(another_group=message.text)
    await bot.send_chat_action(message.chat.id, "typing")  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    if timetable[0]:
        await Timetable.weekday.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Timetable.weekday
        async with state.proxy() as data:
            data["schedule"] = timetable[1][0]  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        # –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ç—ã–∫–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ (—Å—Ç—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–Ω—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å–ª–æ–≤)
        keyboard.add(*[types.KeyboardButton(name) for name in ["–ù–∞ –Ω–µ–¥–µ–ª—é"]])
        keyboard.add(
            *[types.KeyboardButton(name) for name in ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫"]]
        )
        keyboard.add(*[types.KeyboardButton(name) for name in ["–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥"]])
        keyboard.add(*[types.KeyboardButton(name) for name in ["–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]])
        keyboard.add(*[types.KeyboardButton(name) for name in ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–í—ã—Ö–æ–¥"]])
        await bot.send_message(
            message.chat.id,
            "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?",
            reply_markup=keyboard,
        )
    # –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ –±–∞–∑–µ / –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
    elif not timetable[0] and timetable[1] == "connection_error":
        await bot.send_message(
            message.chat.id,
            "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)",
            reply_markup=today_tomorrow_keyboard(),
        )
        await state.finish()
    # –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –¥—Ä—É–≥–æ–≥–æ —Ä–æ–¥–∞
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ["–í—ã—Ö–æ–¥"]])
        await bot.send_message(  # –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –µ—â–µ —Ä–∞–∑
            message.chat.id,
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã(\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)",
            reply_markup=keyboard,
        )


async def weekday_proceed_and_schedule_send(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.
    """
    await bot.send_chat_action(message.chat.id, "typing")  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    async with state.proxy() as data:
        schedule = data["schedule"]  # –±–µ—Ä–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏
        data.clear()
    if message.text != "–ù–∞ –Ω–µ–¥–µ–ª—é":  # —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 1 –¥–µ–Ω—å
        await bot.send_message(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            message.chat.id,
            schedule_string(schedule[message.text]),
            parse_mode="HTML",
        )
    else:  # —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é (–Ω–∞ –∫–∞–∂–¥—ã–π –∏–∑ 7 –¥–Ω–µ–π)
        for day in [
            "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "–í—Ç–æ—Ä–Ω–∏–∫",
            "–°—Ä–µ–¥–∞",
            "–ß–µ—Ç–≤–µ—Ä–≥",
            "–ü—è—Ç–Ω–∏—Ü–∞",
            "–°—É–±–±–æ—Ç–∞",
            "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
        ]:
            await bot.send_message(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                message.chat.id,
                "<b>" + day.upper() + "</b>" + "\n\n" + schedule_string(schedule[day]),
                parse_mode="HTML",
            )
    await bot.send_chat_action(message.chat.id, "typing")  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await bot.send_message(
        message.chat.id,
        "–ß–µ–º –µ—â—ë —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=today_tomorrow_keyboard(),
    )
    await state.finish()  # –≤—ã–∫–ª—é—á–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
