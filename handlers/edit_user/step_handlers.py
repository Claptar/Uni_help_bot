from create_env import bot
from data_constructor import psg
from ..helpers import today_tomorrow_keyboard
from ..states import Profile


from aiogram import types
from aiogram.dispatcher.storage import FSMContext


async def initiate(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π '/profile' –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É, –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—É—é –∑–∞ –Ω–∏–º.
    """
    await psg.insert_action("profile", message.chat.id)
    cur_group = await psg.check_user_group(message.chat.id)
    await bot.send_chat_action(message.chat.id, "typing")  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    if cur_group[0]:
        await Profile.choose.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Profile.choose
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ["–î–∞", "–ù–µ—Ç", "–í—ã—Ö–æ–¥"]])
        if cur_group[1][0] == "ALUMNI":
            await bot.send_message(
                message.chat.id,
                f"–°–µ–π—á–∞—Å —É —Ç–µ–±—è —É–∫–∞–∑–∞–Ω–æ, —á—Ç–æ —Ç—ã ‚Äì –≤—ã–ø—É—Å–∫–Ω–∏–∫. "
                "–¢—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã?",
                reply_markup=keyboard,
            )
        else:
            await bot.send_message(
                message.chat.id,
                f"–°–µ–π—á–∞—Å —É —Ç–µ–±—è —É–∫–∞–∑–∞–Ω–æ, —á—Ç–æ —Ç—ã —É—á–∏—à—å—Å—è –≤ –≥—Ä—É–ø–ø–µ {cur_group[1][0]}. "
                "–¢—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ?",
                reply_markup=keyboard,
            )
    # –µ—Å–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif not cur_group[0] and cur_group[1] == "empty_result":
        await bot.send_message(
            message.chat.id,
            "–ö–∞–∂–µ—Ç—Å—è, –º—ã —Å —Ç–æ–±–æ–π –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã... üò¢\n–°–∫–æ—Ä–µ–π –ø–∏—à–∏ –º–Ω–µ /start!",
            reply_markup=today_tomorrow_keyboard(),
        )
    # –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    else:
        await bot.send_message(
            message.chat.id,
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)",
            reply_markup=today_tomorrow_keyboard(),
        )


async def choose_proceed(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –ø–æ–º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –∂–µ–ª–∞–µ–º—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.
    """
    await bot.send_chat_action(message.chat.id, "typing")  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    if message.text == "–î–∞":  # –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –∑–∞–ø—Ä–æ—Å –æ –≤–≤–æ–¥–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
        await Profile.group.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Profile.group
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(
            *[types.KeyboardButton(name) for name in ["–£–∂–µ –Ω–µ —É—á—É—Å—å", "–í—ã—Ö–æ–¥"]]
        )
        await bot.send_message(
            message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)", reply_markup=keyboard
        )
    elif message.text == "–ù–µ—Ç":  # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await bot.send_message(
            message.chat.id,
            "–Ø —Ä–∞–¥, —á—Ç–æ —Ç–µ–±—è –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç üòâ",
            reply_markup=today_tomorrow_keyboard(),
        )
        await state.finish()  # –≤—ã–∫–ª—é—á–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π


async def group_proceed(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å,
    –ø–æ—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–µ –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
    :param message:
    :param state:
    :return:
    """
    # –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, –∑–∞–ø—Ä–æ—Å –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª–∏—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    group = "ALUMNI" if message.text == "–£–∂–µ –Ω–µ —É—á—É—Å—å" else message.text
    update = await psg.update_user(message.chat.id, group)
    await bot.send_chat_action(message.chat.id, "typing")  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    if update[0]:
        await Profile.custom.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Profile.custom
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ["–•–æ—á—É", "–ù–µ —Ö–æ—á—É"]])
        await bot.send_message(
            message.chat.id,
            "–í—Å–µ –≥–æ—Ç–æ–≤–æ) –¢—ã —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –ª–∏—á–Ω–æ–µ "
            "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã?",
            reply_markup=keyboard,
        )
    # –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ –±–∞–∑–µ (–∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º)
    elif not update[0] and update[1] == "other_error":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(
            *[types.KeyboardButton(name) for name in ["–£–∂–µ –Ω–µ —É—á—É—Å—å", "–í—ã—Ö–æ–¥"]]
        )
        await bot.send_message(  # –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –µ—â–µ —Ä–∞–∑
            message.chat.id,
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)",
            reply_markup=keyboard,
        )
    else:
        await bot.send_message(  # –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –µ—â–µ —Ä–∞–∑
            message.chat.id,
            "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)",
            reply_markup=today_tomorrow_keyboard(),
        )
        await state.finish()


# TODO: to edit_existing
async def custom_proceed(message: types.Message, state: FSMContext):
    await bot.send_chat_action(message.chat.id, "typing")  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    if message.text == "–ù–µ —Ö–æ—á—É":  # –µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await bot.send_message(
            message.chat.id,
            "–Ø —Ä–∞–¥, —á—Ç–æ —Ç–µ–±—è –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç üòâ",
            reply_markup=today_tomorrow_keyboard(),
        )
    elif (
        message.text == "–•–æ—á—É"
    ):  # –µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —Ç–æ –∏–∑–º–µ–Ω—è–µ–º –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        update = await psg.create_custom_timetable(message.chat.id)
        if update[0]:
            await bot.send_message(
                message.chat.id,
                "–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å üôÉ\n"
                "–ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ /custom.",
                reply_markup=today_tomorrow_keyboard(),
            )
        else:  # –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            await bot.send_message(
                message.chat.id,
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)\n"
                "–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ /custom.",
                reply_markup=today_tomorrow_keyboard(),
            )
    await state.finish()
