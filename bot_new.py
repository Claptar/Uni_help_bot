import os
import logging
import pickle

import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.utils.exceptions import TelegramAPIError, BotBlocked

from activity import stat
from math_module import math_part
from koryavov import kor
from data_constructor import psg
from datetime import datetime
from pytz import timezone

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.environ['TOKEN']

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class Start(StatesGroup):
    group = State()
    custom = State()


class Profile(StatesGroup):
    choose = State()
    group = State()
    custom = State()


class Timetable(StatesGroup):
    choose = State()
    another_group = State()
    weekday = State()


class Koryavov(StatesGroup):
    sem_num_state = State()
    task_num_state = State()
    finish_state = State()


class Custom(StatesGroup):
    existing = State()
    new = State()
    weekday = State()
    time = State()
    edit = State()
    again = State()


class Exam(StatesGroup):
    another_group = State()
    choose = State()


class Plots(StatesGroup):
    title_state = State()
    mnk_state = State()
    error_bars_state = State()
    plot_state = State()


class Stat(StatesGroup):
    choice = State()
    unique = State()
    frequency = State()


class Mailing(StatesGroup):
    mailing = State()


def today_tomorrow_keyboard():
    """
    –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞.
    """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['–ù–∞ —Å–µ–≥–æ–¥–Ω—è', '–ù–∞ –∑–∞–≤—Ç—Ä–∞', '/help']])
    return keyboard


def schedule_string(schedule: pd.DataFrame):
    """
    –°—Ç—Ä–æ–∫–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–æ—Ç.
    –í–ê–ñ–ù–û! parse_mode='HTML' - —á—Ç–æ–±—ã —á–∏—Ç–∞–ªc—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç.
    """
    STRING = ''  # "—Å—Ç—Ä–æ–∫–∞" —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    for row in schedule.iterrows():  # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–∏–ø–ª—é—Å–æ–≤—ã–≤–∞–µ–º –∏—Ö –≤ –æ–±—â—É—é "—Å—Ç—Ä–æ–∫—É"
        # –≤—Ä–µ–º—è –ø–∞—Ä—ã - –∂–∏—Ä–Ω—ã–π + –Ω–∞–∫–ª–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
        string: str = '<b>' + '<i>' + row[0] + '</i>' + '</b>' + '\n' + row[1][0]
        STRING += string + '\n\n'  # –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ –ø—Ä–æ–ø—É—Å–∫ (1 enter)
    return STRING


@dp.message_handler(Text(equals='–í—ã—Ö–æ–¥'), state='*')
async def user_exit(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è –≤—ã—Ö–æ–¥ –ø–æ –∂–µ–ª–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞ –ª—é–±–æ–π —Å—Ç–∞–¥–∏–∏).
    """
    await psg.insert_action('exit', message.chat.id)
    current_state = await state.get_state()  # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω–æ —Ö–æ—Ç—è –±—ã –∫–∞–∫–æ–µ-—Ç–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if current_state is None:
        return
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await bot.send_message(
        message.chat.id,
        '–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º! –ù–æ —Ç—ã —ç—Ç–æ, –∑–∞—Ö–æ–¥–∏, –µ—Å–ª–∏ —á—Ç–æ üòâ',
        reply_markup=today_tomorrow_keyboard()
    )
    # —Å—Ç–∏–∫–æ—Å "–¢—ã –∑–∞—Ö–æ–¥–∏ –µ—Å—á–æ"
    await bot.send_sticker(
        message.chat.id,
        'CAACAgIAAxkBAAIsCV42vjU8mR9P-zoPiyBu_3_eG-wTAAIMDQACkjajC9UvBD6_RUE4GAQ'
    )
    # –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –≤—ã–∫–ª—é—á–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.finish()


@dp.message_handler(Text(equals=['–ù–∞ —Å–µ–≥–æ–¥–Ω—è', '–ù–∞ –∑–∞–≤—Ç—Ä–∞']))
async def send_today_tomorrow_schedule(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º '–ù–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞'.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å, –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é timetable.timetable_by_group().
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤—ã–¥–∞–µ—Ç –µ–≥–æ,
    –∏–Ω–∞—á–µ - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –°—Ö–µ–º–∞:
                             CUSTOM
                            /     \
                        True    False (ERR or EMPTY_RES)
                       /   \         \
                  (SMTH,) (None,) ‚Äî MY_GROUP ‚Äî True ‚Äî SEND()
                    /                   /
                  SEND()             False ‚Äî EMPTY_RES ‚Äî –ó–Ω–∞–∫–æ–º—ã –ª–∏ –º—ã?
                                       |
                              CONN_ERR or OTHER_ERR ‚Äî –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞
    """
    await psg.insert_action('to/yes', message.chat.id)
    # —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π –¥–ª—è —É–¥–æ–±–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–æ–≤ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (0, 1, ..., 6) –≤ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è
    week = tuple(['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'])
    # today - –∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–æ—Ç 0 –¥–æ 6)
    today = datetime.now(tz=timezone('Europe/Moscow')).weekday()
    tomorrow = today + 1 if today in range(6) else 0  # –Ω–æ–º–µ—Ä –¥–Ω—è –¥–ª—è –∑–∞–≤—Ç—Ä–∞, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (6), —Ç–æ 0
    day = today if message.text == '–ù–∞ —Å–µ–≥–æ–¥–Ω—è' else tomorrow  # –≤—ã–±–æ—Ä –¥–Ω—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞
    custom_timetable = await psg.send_timetable(custom=True, chat_id=message.chat.id)
    # –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (+ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ª–∏ –æ—à–∏–±–æ–∫)
    if custom_timetable[0] and custom_timetable[1][0] is not None:
        schedule = pickle.loads(custom_timetable[1][0])[week[day]].to_frame()
        await bot.send_message(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            message.chat.id,
            schedule_string(schedule),
            parse_mode='HTML'
        )
    # –µ—Å–ª–∏ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ª–∏—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
    # –ª–∏—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, —Ç–æ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    else:
        group_timetable = await psg.send_timetable(my_group=True, chat_id=message.chat.id)
        if group_timetable[0]:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ
            if bytes(group_timetable[1][0]) == b'DEFAULT':
                await bot.send_message(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                    message.chat.id,
                    '–í —ç—Ç–æ–º —Å–µ–º–µ—Å—Ç—Ä–µ –Ω–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã( '
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –≤ /profile '
                    '–∏–ª–∏ —Å–æ–∑–¥–∞–π –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ /custom üòâ',
                    reply_markup=today_tomorrow_keyboard()
                )
            else:
                schedule = pickle.loads(group_timetable[1][0])[week[day]].to_frame()
                await bot.send_message(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                    message.chat.id,
                    schedule_string(schedule),
                    parse_mode='HTML'
                )
                await bot.send_message(
                    message.chat.id,
                    '–ß–µ–º –µ—â—ë —è –º–æ–≥—É –ø–æ–º–æ—á—å?',
                    reply_markup=today_tomorrow_keyboard()
                )
        # –µ—Å–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif not group_timetable[0] and group_timetable[1] == 'empty_result':
            await bot.send_message(
                message.chat.id,
                '–ö–∞–∂–µ—Ç—Å—è, –º—ã —Å —Ç–æ–±–æ–π –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã... üò¢\n'
                '–°–∫–æ—Ä–µ–π –ø–∏—à–∏ –º–Ω–µ /start!',
                reply_markup=today_tomorrow_keyboard()
            )
        # –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        else:
            await bot.send_message(
                message.chat.id,
                '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)',
                reply_markup=today_tomorrow_keyboard()
            )


@dp.message_handler(commands=['help'])
async def help_def(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π '/help' –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–∞–Ω–¥ –±–æ—Ç–∞.
    """
    await psg.insert_action('help', message.chat.id)
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    with open('files/help.txt', encoding='utf-8', mode='r') as f:
        text = f.read()
    await bot.send_message(message.chat.id, text)


@dp.message_handler(commands='start')
async def start_initiate(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π '/start' –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    group = await psg.check_user_group(message.chat.id)
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    if group[0]:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await bot.send_message(
            message.chat.id,
            '–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üôÉ\n–ú—ã —É–∂–µ —Å —Ç–æ–±–æ–π –∑–Ω–∞–∫–æ–º—ã üòâ '
            '–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —è –Ω–∞–ø–æ–º–Ω–∏–ª —Ç–µ–±–µ, —á—Ç–æ —è —É–º–µ—é)',
            reply_markup=today_tomorrow_keyboard()
        )
    elif not group[0] and group[1] == 'empty_result':  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await Start.group.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Start.group
        await bot.send_message(
            message.chat.id,
            '–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üôÉ\n–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ü–æ–º–æ–≥–∞—Ç–æ—Ä. '
            '–ú–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ, '
            '—á—Ç–æ–±—ã —è –∑–Ω–∞–ª, —á–µ–º –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?'
        )
        await psg.insert_action('start', message.chat.id)  # –ó–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏—è –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–£–∂–µ –Ω–µ —É—á—É—Å—å', '–í—ã—Ö–æ–¥']])
        await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
        await bot.send_message(  # '–£–∂–µ –Ω–µ —É—á—É—Å—å' - –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤
            message.chat.id,
            ' –ù–µ –ø–æ–¥—Å–∫–∞–∂–µ—à—å –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã?\n'
            '(–í —Ñ–æ—Ä–º–∞—Ç–µ –ë00-228 –∏–ª–∏ 777, –∫–∞–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏)',
            reply_markup=keyboard
        )
    # –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ (—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –∏–ª–∏ –¥—Ä—É–≥–∞—è)
    else:
        await bot.send_message(
            message.chat.id,
            '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)'
        )


@dp.message_handler(state=Start.group)
async def start_proceed_group(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ –≤ –±–∞–∑–µ.
    –ï—Å–ª–∏ –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞), —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∑–∞–Ω–æ–≤–æ.
    –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∑–∞–Ω–æ—Å–∏—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü—É User, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å, –Ω—É–∂–Ω–æ –ª–∏ –µ–º—É –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    (group, text) = (
        'ALUMNI',
        '–ü—Ä–∏–≤–µ—Ç –¥–æ—Å—Ç–æ–ø–æ—á—Ç–µ–Ω–Ω–æ–º—É –≤—ã–ø—É—Å–∫–Ω–∏–∫—É! üëã'
    ) if message.text == '–£–∂–µ –Ω–µ —É—á—É—Å—å' else (  # —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–∞ –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        message.text,
        '–û—Ç–ª–∏—á–Ω–æ, –≤–æ—Ç –º—ã –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å üôÉ'
    )
    insert = await psg.insert_user(message.chat.id, group)
    if insert[0]:  # –≥—Ä—É–ø–ø–∞ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        # async with state.proxy() as data:
        #     data['group'] = group
        await Start.custom.set()  # –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Start.custom
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–•–æ—á—É', '–ù–µ —Ö–æ—á—É']])
        await bot.send_message(  # –∑–∞–ø—Ä–æ—Å –æ –ª–∏—á–Ω–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            message.chat.id,
            text + '\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '
                   '–ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É.',
            reply_markup=keyboard
        )
    # –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ –±–∞–∑–µ / —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥
    elif not insert[0] and insert[1] == 'other_error':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–£–∂–µ –Ω–µ —É—á—É—Å—å', '–í—ã—Ö–æ–¥']])
        await bot.send_message(
            message.chat.id,
            '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)',
            reply_markup=keyboard
        )
    # –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
    else:
        await bot.send_message(
            message.chat.id,
            '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)'
        )
        await state.finish()


@dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT,
                    content_types=types.message.ContentType.ANY, state=Start.group)
async def start_proceed_group_invalid_type(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∑–∞–Ω–æ–≤–æ, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await message.reply("–ü—Ä–∏—à–ª–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")


@dp.message_handler(Text(equals=['–•–æ—á—É', '–ù–µ —Ö–æ—á—É']), state=Start.custom)
async def start_proceed_custom(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω—É–∂–Ω–æ –ª–∏ –µ–º—É –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∑–∞–Ω–æ—Å–∏—Ç –∑–∞–≥–æ—Ç–æ–≤–∫—É
    –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    if message.text == '–ù–µ —Ö–æ—á—É':  # –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
        await bot.send_message(
            message.chat.id,
            '–•–æ—Ä–æ—à–æ, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è, '
            '–µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ–≥–æ –≤ –¥–µ–ª–µ üòâ\n'
            '–ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ /custom.'
        )
        await bot.send_message(  # –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–∏—à–µ–º –ø—Ä–æ /help
            message.chat.id,
            '–ê —Ç–µ–ø–µ—Ä—å —Å–∫–æ—Ä–µ–µ –ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, '
            '—á–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ!',
            reply_markup=today_tomorrow_keyboard()
        )
    elif message.text == '–•–æ—á—É':  # –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
        # async with state.proxy() as data:
        #     group = data['group']
        # –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤–µ—Ä–Ω—ã–π (–ø–æ –∏–¥–µ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)
        # –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        update = await psg.create_custom_timetable(message.chat.id)
        if update[0]:
            await bot.send_message(
                message.chat.id,
                '–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å üôÉ\n'
                '–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ! '
                '–ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –µ–≥–æ, –Ω–∞–ø–∏—à–∏ /custom.'
            )
            await bot.send_message(
                message.chat.id,
                '–ê —Ç–µ–ø–µ—Ä—å —Å–∫–æ—Ä–µ–µ –ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, '
                '—á–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ!',
                reply_markup=today_tomorrow_keyboard()
            )
        else:
            await bot.send_message(
                message.chat.id,
                '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)\n'
                '–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ /custom.'
            )
            await bot.send_message(
                message.chat.id,
                '–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è! –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, '
                '—á–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ!',
                reply_markup=today_tomorrow_keyboard()
            )
    await state.finish()  # –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π


@dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT
                    or message.text not in ['–•–æ—á—É', '–ù–µ —Ö–æ—á—É'],
                    content_types=types.message.ContentType.ANY, state=Start.custom)
async def start_proceed_custom_invalid(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await message.reply("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")


@dp.message_handler(commands='profile')
async def edit_initiate(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π '/profile' –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É, –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—É—é –∑–∞ –Ω–∏–º.
    """
    await psg.insert_action('profile', message.chat.id)
    cur_group = await psg.check_user_group(message.chat.id)
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    if cur_group[0]:
        await Profile.choose.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Profile.choose
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–î–∞', '–ù–µ—Ç', '–í—ã—Ö–æ–¥']])
        if cur_group[1][0] == 'ALUMNI':
            await bot.send_message(
                message.chat.id,
                f'–°–µ–π—á–∞—Å —É —Ç–µ–±—è —É–∫–∞–∑–∞–Ω–æ, —á—Ç–æ —Ç—ã ‚Äì –≤—ã–ø—É—Å–∫–Ω–∏–∫. '
                '–¢—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã?',
                reply_markup=keyboard
            )
        else:
            await bot.send_message(
                message.chat.id,
                f'–°–µ–π—á–∞—Å —É —Ç–µ–±—è —É–∫–∞–∑–∞–Ω–æ, —á—Ç–æ —Ç—ã —É—á–∏—à—å—Å—è –≤ –≥—Ä—É–ø–ø–µ {cur_group[1][0]}. '
                '–¢—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ?',
                reply_markup=keyboard
            )
    # –µ—Å–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif not cur_group[0] and cur_group[1] == 'empty_result':
        await bot.send_message(
            message.chat.id,
            '–ö–∞–∂–µ—Ç—Å—è, –º—ã —Å —Ç–æ–±–æ–π –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã... üò¢\n'
            '–°–∫–æ—Ä–µ–π –ø–∏—à–∏ –º–Ω–µ /start!',
            reply_markup=today_tomorrow_keyboard()
        )
    # –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    else:
        await bot.send_message(
            message.chat.id,
            '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)',
            reply_markup=today_tomorrow_keyboard()
        )


@dp.message_handler(Text(equals=['–î–∞', '–ù–µ—Ç']), state=Profile.choose)
async def edit_proceed_choose(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –ø–æ–º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –∂–µ–ª–∞–µ–º—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    if message.text == '–î–∞':  # –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –∑–∞–ø—Ä–æ—Å –æ –≤–≤–æ–¥–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
        await Profile.group.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Profile.group
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–£–∂–µ –Ω–µ —É—á—É—Å—å', '–í—ã—Ö–æ–¥']])
        await bot.send_message(
            message.chat.id,
            '–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)',
            reply_markup=keyboard
        )
    elif message.text == '–ù–µ—Ç':  # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await bot.send_message(
            message.chat.id,
            '–Ø —Ä–∞–¥, —á—Ç–æ —Ç–µ–±—è –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç üòâ',
            reply_markup=today_tomorrow_keyboard()
        )
        await state.finish()  # –≤—ã–∫–ª—é—á–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π


@dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT
                    or message.text not in ['–î–∞', '–ù–µ—Ç', '–í—ã—Ö–æ–¥'],
                    content_types=types.message.ContentType.ANY, state=Profile.choose)
async def edit_proceed_choose_invalid(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await message.reply("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")


@dp.message_handler(state=Profile.group)
async def edit_proceed_group(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å,
    –ø–æ—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–µ –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
    :param message:
    :param state:
    :return:
    """
    # –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, –∑–∞–ø—Ä–æ—Å –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª–∏—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    group = 'ALUMNI' if message.text == '–£–∂–µ –Ω–µ —É—á—É—Å—å' else message.text
    update = await psg.update_user(message.chat.id, group)
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    if update[0]:
        # async with state.proxy() as data:
        #     data['group'] = group
        await Profile.custom.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Profile.custom
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–•–æ—á—É', '–ù–µ —Ö–æ—á—É']])
        await bot.send_message(
            message.chat.id,
            '–í—Å–µ –≥–æ—Ç–æ–≤–æ) –¢—ã —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –ª–∏—á–Ω–æ–µ '
            '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã?',
            reply_markup=keyboard
        )
    # –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ –±–∞–∑–µ (–∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º)
    elif not update[0] and update[1] == 'other_error':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–£–∂–µ –Ω–µ —É—á—É—Å—å', '–í—ã—Ö–æ–¥']])
        await bot.send_message(  # –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –µ—â–µ —Ä–∞–∑
            message.chat.id,
            '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)',
            reply_markup=keyboard
        )
    else:
        await bot.send_message(  # –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –µ—â–µ —Ä–∞–∑
            message.chat.id,
            '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)',
            reply_markup=today_tomorrow_keyboard()
        )
        await state.finish()


@dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT,
                    content_types=types.message.ContentType.ANY, state=Profile.group)
async def edit_proceed_group_invalid_type(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∑–∞–Ω–æ–≤–æ, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await message.reply("–ü—Ä–∏—à–ª–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")


@dp.message_handler(Text(equals=['–•–æ—á—É', '–ù–µ —Ö–æ—á—É']), state=Profile.custom)
async def edit_proceed_custom(message: types.Message, state: FSMContext):
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    if message.text == '–ù–µ —Ö–æ—á—É':  # –µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await bot.send_message(
            message.chat.id,
            '–Ø —Ä–∞–¥, —á—Ç–æ —Ç–µ–±—è –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç üòâ',
            reply_markup=today_tomorrow_keyboard()
        )
    elif message.text == '–•–æ—á—É':  # –µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —Ç–æ –∏–∑–º–µ–Ω—è–µ–º –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        # async with state.proxy() as data:
        #     group = data['group']
        update = await psg.create_custom_timetable(message.chat.id)
        if update[0]:
            await bot.send_message(
                message.chat.id,
                '–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å üôÉ\n'
                '–ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ /custom.',
                reply_markup=today_tomorrow_keyboard()
            )
        else:  # –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            await bot.send_message(
                message.chat.id,
                '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)\n'
                '–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ /custom.',
                reply_markup=today_tomorrow_keyboard()
            )
    await state.finish()


@dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT
                    or message.text not in ['–•–æ—á—É', '–ù–µ —Ö–æ—á—É'],
                    content_types=types.message.ContentType.ANY, state=Profile.custom)
async def edit_proceed_custom_invalid(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await message.reply("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")


@dp.message_handler(commands='koryavov')
async def koryavov(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º /koryavov.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –µ–≥–æ –Ω–æ–º–µ—Ä —Å–µ–º–µ—Å—Ç—Ä–∞ –∫—É—Ä—Å–∞ –æ–±—â–µ–π —Ñ–∏–∑–∏–∫–∏
    """
    await psg.insert_action('koryavov', message.chat.id)
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in [1, 2, 3, 4, 5, '–í—ã—Ö–æ–¥']])  # –∫–Ω–æ–ø–∫–∏ c –Ω–æ–º–µ—Ä–∞–º–∏ —Å–µ–º–µ—Å—Ç—Ä–æ–≤
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Å–µ–º–µ—Å—Ç—Ä–∞ –æ–±—â–µ–π —Ñ–∏–∑–∏–∫–∏: \n'
                                            '1) –ú–µ—Ö–∞–Ω–∏–∫–∞ \n'
                                            '2) –¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞ \n'
                                            '3) –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ \n'
                                            '4) –û–ø—Ç–∏–∫–∞\n'
                                            '5) –ê—Ç–æ–º–Ω–∞—è –∏ —è–¥–µ—Ä–Ω–∞—è —Ñ–∏–∑–∏–∫–∞', reply_markup=keyboard)
    await Koryavov.sem_num_state.set()


@dp.message_handler(lambda message: message.text.isdigit(), state=Koryavov.sem_num_state)
async def sem_num(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º —Å–µ–º–µ—Å—Ç—Ä–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ –≤ data storage.
    –¢–∞–∫ –∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    async with state.proxy() as data:
        data['sem_num'] = message.text
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['–í—ã—Ö–æ–¥']])
    await bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–∏—à–∏ —Ç–µ–ø–µ—Ä—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏', reply_markup=keyboard)
    await Koryavov.task_num_state.set()


# If some invalid input
@dp.message_handler(state=Koryavov.sem_num_state)
async def kor_sem_inv_input(message: types.Message):
    """
    –í —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Å–µ–º–µ—Å—Ç—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π
    —É–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ–º–µ—Å—Ç—Ä–∞
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in [1, 2, 3, 4, 5, '–í—ã—Ö–æ–¥']])  # –∫–Ω–æ–ø–∫–∏ c –Ω–æ–º–µ—Ä–∞–º–∏ —Å–µ–º–µ—Å—Ç—Ä–æ–≤
    await bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –¥–∞–≤–∞–π –µ—â—ë —Ä–∞–∑. –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Å–µ–º–µ—Å—Ç—Ä–∞:')


@dp.message_handler(lambda message: math_part.is_digit(message.text) or message.text == "–ï—â—ë –æ–¥–Ω—É",
                    state=Koryavov.task_num_state)
async def task_page(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–¥–∞—á–∏ –∏ –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∞–π—Ç mipt1.ru —á—Ç–æ–±—ã
    —É–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∫–æ—Ä—è–≤–æ–≤–µ —Å —ç—Ç–æ–π –∑–∞–¥–∞—á–µ. –ü–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –¢–∞–∫ –∂–µ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å "–Ω—É–∂–Ω–∞ –ª–∏ –µ—â—ë –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ ?".
    """
    task_num = message.text
    await bot.send_chat_action(message.chat.id, 'typing')
    async with state.proxy() as data:
        sem_num = int(data['sem_num'])
    reply = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∑—è—Ç–∞ —Å —Å–∞–π—Ç–∞ mipt1.ru \n\n' + kor.kor_page(sem_num, task_num)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['–ï—â—ë –æ–¥–Ω—É', '–í—Å—ë, —Ö–≤–∞—Ç–∏—Ç']])
    await bot.send_message(message.chat.id, reply, reply_markup=keyboard)
    await Koryavov.finish_state.set()


# If some invalid input
@dp.message_handler(state=Koryavov.task_num_state)
async def kor_task_inv_input(message: types.Message):
    """
    –í —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–æ–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏, —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['–í—ã—Ö–æ–¥']])
    await bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –µ—â—ë —Ä–∞–∑)', reply_markup=keyboard)


@dp.message_handler(Text(equals=['–ï—â—ë –æ–¥–Ω—É', '–í—Å—ë, —Ö–≤–∞—Ç–∏—Ç']), state=Koryavov.finish_state, )
async def kor_finish(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ ['–ï—â—ë –æ–¥–Ω—É', '–í—Å—ë, —Ö–≤–∞—Ç–∏—Ç'] –∏ Koryavov.finish_state(). –ò –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é /koryavov –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    if message.text == '–ï—â—ë –æ–¥–Ω—É':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–í—ã—Ö–æ–¥']])
        await bot.send_message(
            message.chat.id,
            '–û–∫–µ–π, –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π –∑–∞–¥–∞—á–∏',
            reply_markup=keyboard)
        await Koryavov.task_num_state.set()
    else:
        async with state.proxy() as data:
            data.clear()
        await bot.send_message(
            message.chat.id,
            '–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—åüòâ –£–¥–∞—á–∏ !',
            reply_markup=today_tomorrow_keyboard())
        await state.finish()


# If some invalid input
@dp.message_handler(state=Koryavov.finish_state)
async def kor_task_inv_input(message: types.Message):
    """
    –í —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–æ–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['–ï—â—ë –æ–¥–Ω—É', '–í—Å—ë, —Ö–≤–∞—Ç–∏—Ç', '–í—ã—Ö–æ–¥']])
    await bot.send_message(
        message.chat.id,
        '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –¢—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –µ—â—ë –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ ?',
        reply_markup=keyboard)


@dp.message_handler(commands='timetable')
async def timetable_initiate(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "/timetable".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –∏–ª–∏ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã –µ–º—É –Ω—É–∂–Ω–æ.
    """
    await psg.insert_action('timetable', message.chat.id)
    await Timetable.choose.set()  # —Å—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Timetable.choose
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await bot.send_message(
        message.chat.id,
        '–°–Ω–æ–≤–∞ –Ω–µ –º–æ–∂–µ—à—å –≤—Å–ø–æ–º–Ω–∏—Ç—å, –∫–∞–∫–∞—è –ø–∞—Ä–∞ —Å–ª–µ–¥—É—é—â–∞—è?\n'
        '–ù–∏—á–µ–≥–æ, —è —É–∂–µ —Ç—É—Ç! üòâ'
    )
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['–õ–∏—á–Ω–æ–µ', '–ú–æ—è –≥—Ä—É–ø–ø–∞']])
    keyboard.add(*[types.KeyboardButton(name) for name in ['–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞', '–í—ã—Ö–æ–¥']])
    await bot.send_message(
        message.chat.id,
        '–í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ)',
        reply_markup=keyboard
    )


@dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT
                    or message.text not in ['–õ–∏—á–Ω–æ–µ', '–ú–æ—è –≥—Ä—É–ø–ø–∞', '–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞', '–í—ã—Ö–æ–¥'],
                    state=Timetable.choose, content_types=types.message.ContentType.ANY)
async def timetable_proceed_choose_invalid(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ ['–õ–∏—á–Ω–æ–µ', '–ú–æ—è –≥—Ä—É–ø–ø–∞', '–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞', '–í—ã—Ö–æ–¥'],
    –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏–∫–∞–∫—É—é –∏–∑ —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫ (+ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è).
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await message.reply("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")


@dp.message_handler(Text(equals=['–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞']), state=Timetable.choose)
async def timetable_proceed_choose(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º '–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞' –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å –æ –Ω–æ–º–µ—Ä–µ –≥—Ä—É–ø–ø—ã.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await Timetable.another_group.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Timetable.another_group
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['–í—ã—Ö–æ–¥']])  # –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    await bot.send_message(
        message.chat.id,  # –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
        '–ù–µ –ø–æ–¥—Å–∫–∞–∂–µ—à—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã?\n'
        '(–í —Ñ–æ—Ä–º–∞—Ç–µ –ë00‚Äì228 –∏–ª–∏ 777, –∫–∞–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏)',
        reply_markup=keyboard
    )


@dp.message_handler(state=Timetable.another_group)
async def timetable_proceed_another_group(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ. –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å –æ –¥–Ω–µ –Ω–µ–¥–µ–ª–∏. –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –µ—â–µ —Ä–∞–∑.
    """
    timetable = await psg.send_timetable(another_group=message.text)
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    if timetable[0]:
        await Timetable.weekday.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Timetable.weekday
        async with state.proxy() as data:
            data['schedule'] = pickle.loads(timetable[1][0])  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        # –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ç—ã–∫–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ (—Å—Ç—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–Ω—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å–ª–æ–≤)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–ù–∞ –Ω–µ–¥–µ–ª—é']])
        keyboard.add(*[types.KeyboardButton(name) for name in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫']])
        keyboard.add(*[types.KeyboardButton(name) for name in ['–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥']])
        keyboard.add(*[types.KeyboardButton(name) for name in ['–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']])
        keyboard.add(*[types.KeyboardButton(name) for name in ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–í—ã—Ö–æ–¥']])
        await bot.send_message(
            message.chat.id,
            '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?',
            reply_markup=keyboard
        )
    # –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ –±–∞–∑–µ / –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
    elif not timetable[0] and timetable[1] == 'connection_error':
        await bot.send_message(
            message.chat.id,
            '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)',
            reply_markup=today_tomorrow_keyboard()
        )
        await state.finish()
    # –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –¥—Ä—É–≥–æ–≥–æ —Ä–æ–¥–∞
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–í—ã—Ö–æ–¥']])
        await bot.send_message(  # –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –µ—â–µ —Ä–∞–∑
            message.chat.id,
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã(\n'
            '–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)',
            reply_markup=keyboard
        )


@dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT,
                    state=Timetable.another_group,
                    content_types=types.message.ContentType.ANY)
async def timetable_proceed_another_group_invalid_type(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∑–∞–Ω–æ–≤–æ, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await message.reply("–ü—Ä–∏—à–ª–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")


@dp.message_handler(Text(equals=['–õ–∏—á–Ω–æ–µ', '–ú–æ—è –≥—Ä—É–ø–ø–∞']), state=Timetable.choose)
async def timetable_proceed_my_group_custom(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω—É–∂–Ω–æ–≥–æ –µ–º—É –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å –æ –Ω—É–∂–Ω–æ–º –¥–Ω–µ –Ω–µ–¥–µ–ª–∏. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ª–∏—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    timetable = (await psg.send_timetable(custom=True, chat_id=message.chat.id) if message.text == '–õ–∏—á–Ω–æ–µ' else
                 await psg.send_timetable(my_group=True, chat_id=message.chat.id))
    if timetable[0]:  # –µ—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ
        if timetable[1][0] is not None and bytes(timetable[1][0]) != b'DEFAULT':
            await Timetable.weekday.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Timetable.weekday
            async with state.proxy() as data:
                data['schedule'] = pickle.loads(timetable[1][0])  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            # –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ç—ã–∫–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ (—Å—Ç—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–Ω—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å–ª–æ–≤)
            keyboard.add(*[types.KeyboardButton(name) for name in ['–ù–∞ –Ω–µ–¥–µ–ª—é']])
            keyboard.add(*[types.KeyboardButton(name) for name in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫']])
            keyboard.add(*[types.KeyboardButton(name) for name in ['–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥']])
            keyboard.add(*[types.KeyboardButton(name) for name in ['–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']])
            keyboard.add(*[types.KeyboardButton(name) for name in ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–í—ã—Ö–æ–¥']])
            await bot.send_message(
                message.chat.id,
                '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?',
                reply_markup=keyboard
            )
        elif timetable[1][0] is not None and bytes(timetable[1][0]) == b'DEFAULT':
            await bot.send_message(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                message.chat.id,
                '–í —ç—Ç–æ–º —Å–µ–º–µ—Å—Ç—Ä–µ –Ω–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã( '
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –≤ /profile üòâ',
                reply_markup=today_tomorrow_keyboard()
            )
            await state.finish()
        else:
            await bot.send_message(
                message.chat.id,
                '–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–≤–æ–µ –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üòû\n'
                '–ù–∞–∂–º–∏ /custom —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.',
                reply_markup=today_tomorrow_keyboard()
            )
            await state.finish()
    # –µ—Å–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif not timetable[0] and timetable[1] == 'empty_result':
        await bot.send_message(
            message.chat.id,
            '–ö–∞–∂–µ—Ç—Å—è, –º—ã —Å —Ç–æ–±–æ–π –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã... üò¢\n'
            'C–∫–æ—Ä–µ–π –ø–∏—à–∏ –º–Ω–µ /start!',
            reply_markup=today_tomorrow_keyboard()
        )
        await state.finish()  # –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–∫–ª—é—á–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    # –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    else:
        await bot.send_message(
            message.chat.id,
            '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)',
            reply_markup=today_tomorrow_keyboard()
        )
        await state.finish()


@dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT
                    or message.text not in ['–ù–∞ –Ω–µ–¥–µ–ª—é', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞',
                                            '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–í—ã—Ö–æ–¥'],
                    state=Timetable.weekday,
                    content_types=types.message.ContentType.ANY)
async def timetable_proceed_weekday_invalid(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ ['–ù–∞ –Ω–µ–¥–µ–ª—é', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞',
                                                           '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–í—ã—Ö–æ–¥'],
    –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏–∫–∞–∫—É—é –∏–∑ —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await message.reply("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")


@dp.message_handler(Text(equals=['–ù–∞ –Ω–µ–¥–µ–ª—é', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞',
                                 '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']),
                    state=Timetable.weekday)
async def timetable_return_schedule(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    async with state.proxy() as data:
        schedule = data['schedule']  # –±–µ—Ä–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏
        data.clear()
    if message.text != '–ù–∞ –Ω–µ–¥–µ–ª—é':  # —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 1 –¥–µ–Ω—å
        await bot.send_message(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            message.chat.id,
            schedule_string(schedule[message.text].to_frame()),
            parse_mode='HTML'
        )
    else:  # —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é (–Ω–∞ –∫–∞–∂–¥—ã–π –∏–∑ 7 –¥–Ω–µ–π)
        for day in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']:
            await bot.send_message(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                message.chat.id,
                '<b>' + day.upper() + '</b>'
                + '\n\n'
                + schedule_string(schedule[day].to_frame()),
                parse_mode='HTML'
            )
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await bot.send_message(
        message.chat.id,
        '–ß–µ–º –µ—â—ë —è –º–æ–≥—É –ø–æ–º–æ—á—å?',
        reply_markup=today_tomorrow_keyboard()
    )
    await state.finish()  # –≤—ã–∫–ª—é—á–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π


@dp.message_handler(commands=['exam'])
async def exam_initiate(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º '/exam'.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –æ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é get_exam_timetable().
    """
    await psg.insert_action('exam', message.chat.id)
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await bot.send_message(
        message.chat.id,
        '–ï—â—ë –Ω–µ –≤—Ä–µ–º—è... –ù–æ —Ç—ã –Ω–µ –∑–∞–±—ã–≤–∞–π...'
    )
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await bot.send_sticker(
        message.chat.id,
        'CAACAgIAAxkBAAMEXj8IxnJkYATlpAOTkJyLiXH2u0UAAvYfAAKiipYBsZcZ_su45LkYBA'
    )


# async def exam_initiate(message: types.Message):
#     """
#     –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º '/exam'.
#     –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –æ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã.
#     """
#     await psg.insert_action('exam', message.chat.id)
#     await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     keyboard.add(*[types.KeyboardButton(name) for name in ['–ú–æ—è –≥—Ä—É–ø–ø–∞', '–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞', '–í—ã—Ö–æ–¥']])
#     await bot.send_message(
#         message.chat.id,
#         '–≠—Ç–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç–∞–ª–æ... –í—ã–±–µ—Ä–∏, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤'
#         ' –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å)',
#         reply_markup=keyboard
#     )
#     await Exam.choose.set()
#
#
# @dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT
#                     or message.text not in ['–ú–æ—è –≥—Ä—É–ø–ø–∞', '–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞', '–í—ã—Ö–æ–¥'],
#                     state=Exam.choose, content_types=types.message.ContentType.ANY)
# async def exam_proceed_choose_invalid(message: types.Message):
#     """
#     –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ ['–õ–∏—á–Ω–æ–µ', '–ú–æ—è –≥—Ä—É–ø–ø–∞', '–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞', '–í—ã—Ö–æ–¥'],
#     –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏–∫–∞–∫—É—é –∏–∑ —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫ (+ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è).
#     """
#     await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
#     await message.reply("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")
#
#
# @dp.message_handler(Text(equals=['–ú–æ—è –≥—Ä—É–ø–ø–∞']), state=Exam.choose)
# async def exam_return_my_group_schedule(message: types.Message, state: FSMContext):
#     timetable = await psg.send_exam_timetable(my_group=True, chat_id=message.chat.id)
#     if timetable[0]:  # –µ—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ
#         if timetable[1][0] is not None:
#             await bot.send_message(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
#                 message.chat.id,
#                 schedule_string(pickle.loads(timetable[1][0])),
#                 parse_mode='HTML'
#             )
#             await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
#             await bot.send_message(
#                 message.chat.id,
#                 '–ß–µ–º –µ—â—ë —è –º–æ–≥—É –ø–æ–º–æ—á—å?',
#                 reply_markup=today_tomorrow_keyboard()
#             )
#             await state.finish()  # –≤—ã–∫–ª—é—á–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
#         else:  # –µ—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞—à–ª–æ—Å—å
#             await bot.send_message(
#                 message.chat.id,
#                 '–ò–∑–≤–∏–Ω–∏, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –º—ã –Ω–µ –Ω–∞—à–ª–∏,'
#                 ' –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)',
#                 reply_markup=today_tomorrow_keyboard()
#             )
#             await state.finish()
#     # –µ—Å–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     elif not timetable[0] and timetable[1] == 'empty_result':
#         await bot.send_message(
#             message.chat.id,
#             '–ö–∞–∂–µ—Ç—Å—è, –º—ã —Å —Ç–æ–±–æ–π –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã... üò¢\n'
#             'C–∫–æ—Ä–µ–π –ø–∏—à–∏ –º–Ω–µ /start!',
#             reply_markup=today_tomorrow_keyboard()
#         )
#         await state.finish()  # –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–∫–ª—é—á–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
#     # –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
#     else:
#         await bot.send_message(
#             message.chat.id,
#             '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)',
#             reply_markup=today_tomorrow_keyboard()
#         )
#         await state.finish()
#
#
# @dp.message_handler(Text(equals=['–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞']), state=Exam.choose)
# async def exam_proceed_another_group(message: types.Message):
#     """
#     –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º '–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞' –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å –æ –Ω–æ–º–µ—Ä–µ –≥—Ä—É–ø–ø—ã.
#     """
#     await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
#     await Exam.another_group.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Timetable.another_group
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     keyboard.add(*[types.KeyboardButton(name) for name in ['–í—ã—Ö–æ–¥']])  # –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
#     await bot.send_message(
#         message.chat.id,  # –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
#         '–ù–µ –ø–æ–¥—Å–∫–∞–∂–µ—à—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã?\n'
#         '(–í —Ñ–æ—Ä–º–∞—Ç–µ –ë00‚Äì228 –∏–ª–∏ 777, –∫–∞–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏)',
#         reply_markup=keyboard
#     )
#
#
# @dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT,
#                     state=Exam.another_group,
#                     content_types=types.message.ContentType.ANY)
# async def exam_proceed_another_group_invalid_type(message: types.Message):
#     """
#     –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∑–∞–Ω–æ–≤–æ, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.
#     """
#     await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
#     await message.reply("–ü—Ä–∏—à–ª–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")
#
#
# @dp.message_handler(state=Exam.another_group)
# async def exam_proceed_another_group(message: types.Message, state: FSMContext):
#     """
#     –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ. –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
#     –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –µ—â–µ —Ä–∞–∑.
#     """
#     timetable = await psg.send_exam_timetable(another_group=message.text)
#     await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
#     if timetable[0]:
#         if timetable[1][0] is not None:
#             await bot.send_message(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
#                 message.chat.id,
#                 schedule_string(pickle.loads(timetable[1][0])),
#                 parse_mode='HTML'
#             )
#             await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
#             await bot.send_message(
#                 message.chat.id,
#                 '–ß–µ–º –µ—â—ë —è –º–æ–≥—É –ø–æ–º–æ—á—å?',
#                 reply_markup=today_tomorrow_keyboard()
#             )
#             await state.finish()  # –≤—ã–∫–ª—é—á–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
#         else:  # –µ—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞—à–ª–æ—Å—å
#             await bot.send_message(
#                 message.chat.id,
#                 '–ò–∑–≤–∏–Ω–∏, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –º—ã –Ω–µ –Ω–∞—à–ª–∏,'
#                 ' –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)',
#                 reply_markup=today_tomorrow_keyboard()
#             )
#             await state.finish()
#     # –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ –±–∞–∑–µ / –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
#     elif not timetable[0] and timetable[1] == 'connection_error':
#         await bot.send_message(
#             message.chat.id,
#             '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)',
#             reply_markup=today_tomorrow_keyboard()
#         )
#         await state.finish()
#     # –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –¥—Ä—É–≥–æ–≥–æ —Ä–æ–¥–∞
#     else:
#         keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#         keyboard.add(*[types.KeyboardButton(name) for name in ['–í—ã—Ö–æ–¥']])
#         await bot.send_message(  # –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –µ—â–µ —Ä–∞–∑
#             message.chat.id,
#             '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã(\n'
#             '–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)',
#             reply_markup=keyboard
#         )


@dp.message_handler(commands=['custom'])
async def custom_initiate(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º '/custom'.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ª–∏—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–∞–∫–æ–≤–æ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω
    –∑–∞–≤–µ—Å—Ç–∏ —Ç–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ï—Å–ª–∏ –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≤ –±–∞–∑–µ,
    —Ñ—É–∫—Ü–∏—è –ø–æ—Å—ã–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ –≤—ã–±–æ—Ä–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –∏–ª–∏ –∫–∞–∫-—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å.
    """
    await psg.insert_action('custom', message.chat.id)
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await bot.send_message(
        message.chat.id,
        '–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ '
        '–∏–ª–∏ —á—Ç–æ-—Ç–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –Ω–µ–º? '
        '–í —ç—Ç–æ–º —è –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ —Ç–µ–±–µ –ø–æ–º–æ—á—å üòâ'
    )
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    timetable = await psg.send_timetable(custom=True, chat_id=message.chat.id)
    if timetable[0] and timetable[1][0] is not None:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ
        await Custom.existing.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Custom.existing
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–ò–∑–º–µ–Ω–∏—Ç—å', '–í—ã—Ö–æ–¥']])
        await bot.send_message(  # –≤–æ–ø—Ä–æ—Å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
            message.chat.id,
            '–í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å '
            '—Å–¥–µ–ª–∞—Ç—å —Å –ª–∏—á–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º)',
            reply_markup=keyboard
        )
    elif timetable[0] and timetable[1][0] is None:  # –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç –ª–∏—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        await Custom.new.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Custom.new
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–î–∞–≤–∞–π', '–ö–∞–∫-–Ω–∏–±—É–¥—å –ø–æ—Ç–æ–º', '–í—ã—Ö–æ–¥']])
        await bot.send_message(
            message.chat.id,
            '–£ —Ç–µ–±—è –ø–æ–∫–∞ –µ—â–µ –Ω–µ—Ç –ª–∏—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è üò¢\n'
            '–î–∞–≤–∞–π –∑–∞–≤–µ–¥–µ–º –µ–≥–æ —Ç–µ–±–µ?',
            reply_markup=keyboard
        )
    elif not timetable[0] and timetable[1] == 'empty_result':
        await bot.send_message(
            message.chat.id,
            '–ö–∞–∂–µ—Ç—Å—è, –º—ã —Å —Ç–æ–±–æ–π –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã... üò¢\n'
            'C–∫–æ—Ä–µ–π –ø–∏—à–∏ –º–Ω–µ /start!',
            reply_markup=today_tomorrow_keyboard()
        )
    # –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    else:
        await bot.send_message(
            message.chat.id,
            '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)',
            reply_markup=today_tomorrow_keyboard()
        )


@dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT
                    or message.text not in ['–î–∞–≤–∞–π', '–ö–∞–∫-–Ω–∏–±—É–¥—å –ø–æ—Ç–æ–º', '–í—ã—Ö–æ–¥'],
                    state=Custom.new,
                    content_types=types.message.ContentType.ANY)
async def custom_add_new_invalid(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ ['–î–∞–≤–∞–π', '–ö–∞–∫-–Ω–∏–±—É–¥—å –ø–æ—Ç–æ–º', '–í—ã—Ö–æ–¥'],
    –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏–∫–∞–∫—É—é –∏–∑ —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await message.reply("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")


@dp.message_handler(Text(equals=['–î–∞–≤–∞–π', '–ö–∞–∫-–Ω–∏–±—É–¥—å –ø–æ—Ç–æ–º']), state=Custom.new)
async def custom_add_new(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω—É–∂–Ω–æ –ª–∏ –µ–º—É –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ,
    –≤ —Å–ª—É—á–∞–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∑–∞–≤–æ–¥–∏—Ç –µ–º—É —Ç–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    if message.text == '–î–∞–≤–∞–π':  # –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        update = await psg.create_custom_timetable(message.chat.id)
        if update[0]:
            await bot.send_message(  # –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
                message.chat.id,
                '–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å üôÉ\n'
                '–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ! '
                '–ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –µ–≥–æ, –Ω–∞–ø–∏—à–∏ /custom.',
                reply_markup=today_tomorrow_keyboard()
            )
        else:  # –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞
            await bot.send_message(
                message.chat.id,
                '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)',
                reply_markup=today_tomorrow_keyboard()
            )
    else:  # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await bot.send_message(
            message.chat.id,
            '–•–æ—Ä–æ—à–æ, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è, '
            '–µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ–≥–æ –≤ –¥–µ–ª–µ üòâ',
            reply_markup=today_tomorrow_keyboard()
        )
    await state.finish()  # —Ç—É–ø–∏–∫–æ–≤–∞—è –≤–µ—Ç–∫–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π


@dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT
                    or message.text not in ['–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–ò–∑–º–µ–Ω–∏—Ç—å', '–í—ã—Ö–æ–¥'],
                    state=Custom.existing,
                    content_types=types.message.ContentType.ANY)
async def custom_choose_existing_invalid(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ ['–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–ò–∑–º–µ–Ω–∏—Ç—å', '–í—ã—Ö–æ–¥'],
    –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏–∫–∞–∫—É—é –∏–∑ —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await message.reply("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")


@dp.message_handler(Text(equals=['–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–ò–∑–º–µ–Ω–∏—Ç—å']), state=Custom.existing)
async def custom_choose_existing(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª–∏—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –æ –Ω—É–∂–Ω–æ–º –¥–Ω–µ –Ω–µ–¥–µ–ª–∏.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await Custom.weekday.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Custom.weekday
    async with state.proxy() as data:
        data['choice'] = message.text  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç, –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–∞–ª—å—à–µ
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ç—ã–∫–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ (—Å—Ç—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–Ω—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å–ª–æ–≤)
    keyboard.add(*[types.KeyboardButton(name) for name in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫']])
    keyboard.add(*[types.KeyboardButton(name) for name in ['–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥']])
    keyboard.add(*[types.KeyboardButton(name) for name in ['–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']])
    keyboard.add(*[types.KeyboardButton(name) for name in ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–í—ã—Ö–æ–¥']])
    text = ('—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å)'
            if message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å' else
            '–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è)'
            )  # –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞ –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ—á–∫—É, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
    await bot.send_message(
        message.chat.id,
        '–í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, ' + text,
        reply_markup=keyboard
    )


@dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT
                    or message.text not in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥',
                                            '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–í—ã—Ö–æ–¥'],
                    state=Custom.weekday,
                    content_types=types.message.ContentType.ANY)
async def custom_proceed_weekday_invalid(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥',
                                                           '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–í—ã—Ö–æ–¥'],
    –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏–∫–∞–∫—É—é –∏–∑ —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await message.reply("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")


@dp.message_handler(Text(equals=['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']),
                    state=Custom.weekday)
async def custom_proceed_weekday(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏ –∏, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é,
    –ª–∏–±–æ –≤—ã–¥–∞–µ—Ç –µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ª–∏–±–æ –ø–æ—Å—ã–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—Ä—ã, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    timetable = await psg.send_timetable(custom=True, chat_id=message.chat.id)
    if timetable[0]:  # –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–∏–∫–∞–∫–æ–π –æ—à–∏–±–∫–∏ (–ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ä–∞–Ω–µ–µ)
        schedule = pickle.loads(timetable[1][0])  # —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
        await bot.send_message(  # –ø—Ä–∏—Å—ã–ª–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            message.chat.id,
            schedule_string(schedule[message.text].to_frame()),
            parse_mode='HTML'
        )  # parse_mode - —á—Ç–æ–±—ã —á–∏—Ç–∞–ª –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
        async with state.proxy() as data:
            choice = data['choice']
            data.clear()
        if choice == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å':  # —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –æ—Ç–≤–µ—Ç, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ
            await bot.send_message(  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ –±—ã–ª–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ,
                message.chat.id,  # —Ç–æ —ç—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ
                '–ß–µ–º –µ—â—ë —è –º–æ–≥—É –ø–æ–º–æ—á—å?',
                reply_markup=today_tomorrow_keyboard()
            )
            await state.finish()  # –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤—ã–∫–ª—é—á–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        else:  # –µ—Å–ª–∏ –ø–æ–ª—å–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ –±—ã–ª–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, –∫–∞–∫—É—é –ø–∞—Ä—É –æ–Ω —Ö–æ—á–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å
            await Custom.time.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Custom.time
            async with state.proxy() as data:
                data['schedule'] = schedule  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–µ–Ω—å
                data['day'] = message.text
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(*[types.KeyboardButton(name) for name in ['09:00 ‚Äì 10:25', '10:45 ‚Äì 12:10']])
            keyboard.add(*[types.KeyboardButton(name) for name in ['12:20 ‚Äì 13:45', '13:55 ‚Äì 15:20']])
            keyboard.add(*[types.KeyboardButton(name) for name in ['15:30 ‚Äì 16:55', '17:05 ‚Äì 18:30']])
            keyboard.add(*[types.KeyboardButton(name) for name in ['18:35 ‚Äì 20:00', '–í—ã—Ö–æ–¥']])
            await bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Ä–µ–º—è, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ '
                '–Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å)',
                reply_markup=keyboard
            )
    else:  # –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞
        await bot.send_message(
            message.chat.id,
            '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)',
            reply_markup=today_tomorrow_keyboard()
        )
        await state.finish()  # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π


@dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT
                    or message.text not in ['09:00 ‚Äì 10:25', '10:45 ‚Äì 12:10', '12:20 ‚Äì 13:45', '13:55 ‚Äì 15:20',
                                            '15:30 ‚Äì 16:55', '17:05 ‚Äì 18:30', '18:35 ‚Äì 20:00', '–í—ã—Ö–æ–¥'],
                    state=Custom.time,
                    content_types=types.message.ContentType.ANY)
async def custom_proceed_time_invalid(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ ['09:00 ‚Äì 10:25', '10:45 ‚Äì 12:10', '12:20 ‚Äì 13:45',
                                                           '13:55 ‚Äì 15:20', '15:30 ‚Äì 16:55', '17:05 ‚Äì 18:30',
                                                           '18:35 ‚Äì 20:00', '–í—ã—Ö–æ–¥'],
    –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏–∫–∞–∫—É—é –∏–∑ —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await message.reply("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")


@dp.message_handler(Text(equals=['09:00 ‚Äì 10:25', '10:45 ‚Äì 12:10', '12:20 ‚Äì 13:45', '13:55 ‚Äì 15:20',
                                 '15:30 ‚Äì 16:55', '17:05 ‚Äì 18:30', '18:35 ‚Äì 20:00']), state=Custom.time)
async def custom_proceed_time(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –ø–∞—Ä—ã, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å,
    —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await Custom.edit.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Custom.edit
    async with state.proxy() as data:
        data['time'] = message.text  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–∞—Ä—ã
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['–í—ã—Ö–æ–¥']])  # –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    await bot.send_message(
        message.chat.id,  # –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
        '–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å '
        '—ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ) (–ú–æ–∂–µ—à—å –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–Ω–µ –∏ —Å–º–∞–π–ª–∏–∫–∏)',
        reply_markup=keyboard
    )


@dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT,
                    state=Custom.edit,
                    content_types=types.message.ContentType.ANY)
async def custom_proceed_edit_invalid_type(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∑–∞–Ω–æ–≤–æ, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await message.reply("–ü—Ä–∏—à–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")


@dp.message_handler(state=Custom.edit)
async def custom_proceed_edit(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä—ã,
    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    async with state.proxy() as data:
        schedule = data['schedule']  # –¥–æ—Å—Ç–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–µ–Ω—å
        day = data['day']
        schedule[day].loc[data['time']] = message.text  # –∑–∞–º–µ–Ω—è–µ–º –Ω—É–∂–Ω—É—é –ø–∞—Ä—É
        data.clear()
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    update = await psg.update_custom_timetable(
        message.chat.id,
        pickle.dumps(schedule, protocol=pickle.HIGHEST_PROTOCOL)
    )
    if update[0]:
        await Custom.again.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Custom.again
        async with state.proxy() as data:
            data['schedule'] = schedule  # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–µ–Ω—å (–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ state.proxy())
            data['day'] = day
        await bot.send_message(
            message.chat.id,
            '–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å üôÉ\n'
            '–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ –∫–∞–∫–æ–µ-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ '
            '–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å?'
        )
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–•–æ—á—É', '–ù–µ —Ö–æ—á—É', '–í—ã—Ö–æ–¥']])
        await bot.send_message(  # –ø–æ—Å—ã–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏—Ç—å
            message.chat.id,  # –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —á—Ç–æ-—Ç–æ –µ—â–µ
            schedule_string(schedule[day].to_frame()),
            parse_mode='HTML',
            reply_markup=keyboard
        )
    else:  # –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞
        await bot.send_message(
            message.chat.id,
            '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)',
            reply_markup=today_tomorrow_keyboard()
        )
        await state.finish()


@dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT
                    or message.text not in ['–•–æ—á—É', '–ù–µ —Ö–æ—á—É', '–í—ã—Ö–æ–¥'],
                    content_types=types.message.ContentType.ANY, state=Custom.again)
async def custom_proceed_again_invalid(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await message.reply("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")


@dp.message_handler(Text(equals=['–•–æ—á—É', '–ù–µ —Ö–æ—á—É']), state=Custom.again)
async def custom_proceed_again(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
    –ï—Å–ª–∏ —Ö–æ—á–µ—Ç, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –≤—Ä–µ–º—è –ø–∞—Ä—ã.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    if message.text == '–ù–µ —Ö–æ—á—É':  # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await bot.send_message(
            message.chat.id,
            '–•–æ—Ä–æ—à–æ, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è, '
            '–µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–µ–º üòâ',
            reply_markup=today_tomorrow_keyboard()
        )
        await state.finish()  # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    else:  # –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await Custom.time.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Custom.time
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['09:00 ‚Äì 10:25', '10:45 ‚Äì 12:10']])
        keyboard.add(*[types.KeyboardButton(name) for name in ['12:20 ‚Äì 13:45', '13:55 ‚Äì 15:20']])
        keyboard.add(*[types.KeyboardButton(name) for name in ['15:30 ‚Äì 16:55', '17:05 ‚Äì 18:30']])
        keyboard.add(*[types.KeyboardButton(name) for name in ['18:35 ‚Äì 20:00', '–í—ã—Ö–æ–¥']])
        await bot.send_message(
            message.chat.id,
            '–í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Ä–µ–º—è, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ '
            '–Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å)',
            reply_markup=keyboard
        )


@dp.message_handler(commands='plot')
async def plot(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º '/plot' –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–æ—Å—å–±–æ–π
    —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞.
    """
    await psg.insert_action('plot', message.chat.id)
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await bot.send_message(message.chat.id, '–°–Ω–æ–≤–∞ –ª–∞–±–∫–∏ –¥–µ–ª–∞–µ—à—å?) –û—Ö —É–∂ —ç—Ç–∏ –≥—Ä–∞—Ñ–∏–∫–∏!...'
                                            ' –°–µ–π—á–∞—Å –±—ã—Å—Ç—Ä–µ–Ω—å–∫–æ –≤—Å—ë –ø–æ—Å—Ç—Ä–æ—é, —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç—Å—è'
                                            ' –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤'
                                            'üòâ –ò –Ω–µ –∑–∞—Å–∏–∂–∏–≤–∞–π—Å—è, –ª–æ–∂–∏—Å—å —Å–ø–∞—Ç—å)')
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è', '–í—ã—Ö–æ–¥']])
    await bot.send_message(
        message.chat.id,
        '–ö–∞–∫ –º—ã –Ω–∞–∑–æ–≤—ë–º –≥—Ä–∞—Ñ–∏–∫?\n'
        '–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –¥–∞–≤–∞—Ç—å –µ–º—É –Ω–∞–∑–≤–∞–Ω–∏–µ, '
        '—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üòâ',
        reply_markup=keyboard
    )
    await Plots.title_state.set()


@dp.message_handler(lambda message: message.content_type == types.message.ContentType.TEXT, state=Plots.title_state)
async def title(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ data storage –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
    —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–æ—Å—å–±–æ–π —É–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω–æ –ª–∏ —Å—Ç—Ä–æ–∏—Ç—å –ø—Ä—è–º—É—é –ø–æ –º–Ω–∫.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    async with state.proxy() as data:
        if message.text == '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è':
            data['title'] = ''
        else:
            data['title'] = message.text
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['‚úÖ', '‚ùå', '–í—ã—Ö–æ–¥']])
    await bot.send_message(
        message.chat.id,
        '–ü—Ä—è–º—É—é –ø–æ –ú–ù–ö —Å—Ç—Ä–æ–∏–º?',
        reply_markup=keyboard
    )
    await Plots.mnk_state.set()


# In case some bad input
@dp.message_handler(state=Plots.title_state, content_types=types.message.ContentType.ANY)
async def title_bad_input(message: types.Message):
    """
    –í —Å–ª—É—á–∞–µ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞, —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è']])
    await bot.send_message(
        message.chat.id,
        '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª... –ù–∞–ø–∏—à–∏ –µ—â—ë —Ä–∞–∑ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞.\n'
        '–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –¥–∞–≤–∞—Ç—å –µ–º—É –Ω–∞–∑–≤–∞–Ω–∏–µ, '
        '—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üòâ',
        reply_markup=keyboard
    )


@dp.message_handler(Text(equals=['‚úÖ', '‚ùå']), state=Plots.mnk_state)
async def mnk(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–¥–Ω–∏–º –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ ['‚úÖ', '‚ùå'] –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞
    –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç error_bars_state –∏–ª–∏ plot_state.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    if message.text == '‚úÖ':
        async with state.proxy() as data:
            data['mnk'] = True
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['0.0/0.0']])
        await bot.send_message(
            message.chat.id,
            '–£–∫–∞–∂–∏ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –ø–æ –æ—Å—è–º —Ö –∏ y –≤ '
            '—Ñ–æ—Ä–º–∞—Ç–µ "2.51/2.51", '
            '–µ—Å–ª–∏ –∫—Ä–µ—Å—Ç—ã –Ω–µ –Ω—É–∂–Ω—ã, —Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
            reply_markup=keyboard
        )
        await Plots.error_bars_state.set()
    else:
        async with state.proxy() as data:
            data['mnk'] = False
            data['errors'] = [0.0, 0.0]
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–í—ã—Ö–æ–¥']])
        with open('files/Example.xlsx', 'rb') as example:
            await bot.send_document(message.chat.id, example)
        await bot.send_message(
            message.chat.id,
            '–ü—Ä–∏—à–ª–∏ .xlsx —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–∫ –≤ example.xlsx, –∏ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ.',
            reply_markup=keyboard
        )
        await Plots.plot_state.set()


# In case of bad input
@dp.message_handler(state=Plots.mnk_state, content_types=types.message.ContentType.ANY)
async def mnk_bad_input(message: types.Message):
    """
    –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ['‚úÖ', '‚ùå'], —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['‚úÖ', '‚ùå', '–í—ã—Ö–æ–¥']])
    await bot.send_message(
        message.chat.id,
        '–ò–∑–≤–∏–Ω–∏, –ø–æ–≤—Ç–æ—Ä–∏ –µ—â—ë —Ä–∞–∑... –ü—Ä—è–º—É—é –ø–æ –ú–ù–ö —Å—Ç—Ä–æ–∏–º?',
        reply_markup=keyboard
    )


@dp.message_handler(lambda message: message.content_type == types.message.ContentType.TEXT,
                    state=Plots.error_bars_state)
async def error_bars(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∫—Ä–µ—Å—Ç–æ–≤ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏—Å–ª–∞—Ç—å excel —Ñ–∞–π–ª, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç
    —Å—Ç—Ä–æ–∏—Ç—å—Å—è –≥—Ä–∞—Ñ–∏–∫.
    """
    try:
        await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
        async with state.proxy() as data:
            data['errors'] = list(map(float, message.text.split('/')))
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–í—ã—Ö–æ–¥']])
        with open('files/Example.xlsx', 'rb') as expl:
            await bot.send_document(message.chat.id, expl)
        await bot.send_message(
            message.chat.id,
            '–ü—Ä–∏—à–ª–∏ .xlsx —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–∫ –≤ example.xlsx –∏ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ.',
            reply_markup=keyboard
        )
        await Plots.plot_state.set()
    except Exception as e:
        print(e)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['0.0/0.0']])
        await bot.send_message(
            message.chat.id,
            '–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö( –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑. '
            '–ü—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–µ—Å—Ç–æ–≤ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π –ø–æ –æ—Å—è–º —Ö –∏ y –≤ '
            '—Ñ–æ—Ä–º–∞—Ç–µ "2.51/2.51", –µ—Å–ª–∏ –∫—Ä–µ—Å—Ç—ã –Ω–µ –Ω—É–∂–Ω—ã, —Ç–æ'
            ' –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
            reply_markup=keyboard
        )


# In case of bad input
@dp.message_handler(state=Plots.error_bars_state, content_types=types.message.ContentType.ANY)
async def eror_bars_bad_input(message: types.Message):
    """
    –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "2.51/2.51",
    —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['0.0/0.0']])
    await bot.send_message(
        message.chat.id,
        '–¢—ã –ø—Ä–∏—Å–ª–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ( –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑. '
        '–ü—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–µ—Å—Ç–æ–≤ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π –ø–æ –æ—Å—è–º —Ö –∏ y –≤ '
        '—Ñ–æ—Ä–º–∞—Ç–µ "2.51/2.51", –µ—Å–ª–∏ –∫—Ä–µ—Å—Ç—ã –Ω–µ –Ω—É–∂–Ω—ã, —Ç–æ'
        ' –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
        reply_markup=keyboard
    )


@dp.message_handler(content_types=types.message.ContentTypes.DOCUMENT, state=Plots.plot_state)
async def plot(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Excel-—Ñ–∞–π–ª–æ–º, —Å—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–æ –¥–∞–Ω–Ω—ã–º –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å
    –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –ø—Ä—è–º—ã—Ö (–µ—Å–ª–∏ –Ω–∞–¥–æ) –∏ pdf –∏ png —Ñ–∞–π–ª—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–∞.
    """
    try:
        await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        await bot.download_file(file.file_path, 'file.xlsx')
        async with state.proxy() as data:
            title = data['title']
            errors = data['errors']
            mnk = data['mnk']
            data.clear()
        coef = math_part.plots_drawer('file.xlsx', title, errors[0], errors[1], mnk)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–ù–∞ —Å–µ–≥–æ–¥–Ω—è', '–ù–∞ –∑–∞–≤—Ç—Ä–∞']])
        await bot.send_message(
            message.chat.id,
            '–ü—Ä–∏–Ω–∏–º–∞–π —Ä–∞–±–æ—Ç—É!)',
            reply_markup=keyboard
        )
        with open('plot.png', 'rb') as photo:
            await bot.send_chat_action(message.chat.id, 'upload_document')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "upload document"
            await bot.send_document(
                message.chat.id,
                photo
            )
        if mnk:
            for i in range(len(coef)):
                a, b, d_a, d_b = coef[i]
                await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
                await bot.send_message(
                    message.chat.id,
                    f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã {i + 1}-–æ–π –ø—Ä—è–º–æ–π:\n"
                    f" a = {a} +- {d_a}\n"
                    f" b = {b} +- {d_b}"
                )
        with open('plot.pdf', 'rb') as photo:
            await bot.send_chat_action(message.chat.id, 'upload_document')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "upload document"
            await bot.send_document(message.chat.id, photo)
        os.remove('plot.pdf')
        os.remove('plot.png')
        math_part.BOT_PLOT = False
        os.remove('file.xlsx')
        await state.finish()
    except Exception as e:
        os.remove('file.xlsx')
        print(e)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–í—ã—Ö–æ–¥']])
        await bot.send_message(
            message.chat.id,
            '–¢—ã —Ç–æ—á–Ω–æ –ø—Ä–∏—Å–ª–∞–ª .xlsx —Ñ–∞–π–ª –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ? –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑!',
            reply_markup=keyboard
        )


# In case of bad input
@dp.message_handler(content_types=types.message.ContentType.ANY, state=Plots.plot_state)
async def plot_bad_input(message: types.Message):
    """
    –í —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏—Å–ª–∞—Ç—å excel-—Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑.
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['–í—ã—Ö–æ–¥']])
    await bot.send_message(
        message.chat.id,
        '–¢—ã —Ç–æ—á–Ω–æ –ø—Ä–∏—Å–ª–∞–ª .xlsx —Ñ–∞–π–ª? –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑! '
        '–ü—Ä–∏—à–ª–∏ .xlsx —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏, –∏ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ',
        reply_markup=keyboard
    )


@dp.message_handler(commands=['stat'])
async def stat_start(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['Frequency', 'Unique']])
    await bot.send_message(
        message.chat.id,
        '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é',
        reply_markup=keyboard
    )
    await Stat.choice.set()


@dp.message_handler(Text(equals='Unique'), state=Stat.choice)
async def stat_start(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ —Ç–æ–º –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤–µ—Ä–º–µ–Ω–∏ –Ω—É–∂–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['–ó–∞ —Å–µ–≥–æ–¥–Ω—è', '–ó–∞ –≤—á–µ—Ä–∞', '–ó–∞ –Ω–µ–¥–µ–ª—é']])
    await bot.send_message(
        message.chat.id,
        '–ó–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        reply_markup=keyboard
    )
    await Stat.unique.set()


@dp.message_handler(state=Stat.unique)
async def stat_start(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —á–∏—Å–ª–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω—É–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    number = stat.uniqe_users(message.text)
    keyboard = today_tomorrow_keyboard()
    await bot.send_message(
        message.chat.id,
        f'–í —ç—Ç–æ—Ç –¥–µ–Ω—å –±—ã–ª–æ {number} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        reply_markup=keyboard
    )
    await state.finish()


@dp.message_handler(Text(equals='Frequency'), state=Stat.choice)
async def stat_start(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —á–∞—Å—Ç–æ—Ç–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    """
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await bot.send_message(
        message.chat.id,
        '–ß–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:'
    )
    freq = stat.frequency_of_use()
    text = '\n'.join(freq)
    keyboard = today_tomorrow_keyboard()
    await bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "typing"
    await bot.send_message(
        message.chat.id,
        text,
        reply_markup=keyboard
    )
    await state.finish()


@dp.message_handler(commands=['mail'])
async def mailing_start(message):
    pers_id = message.chat.id
    admins = [int(os.environ['ADMIN_1']), int(os.environ['ADMIN_2'])]
    await bot.send_chat_action(message.chat.id, 'typing')
    if pers_id in admins:
        await bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
    else:
        await bot.send_message(message.chat.id, '–ë–æ—é—Å—å, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é, –æ —á—ë–º —Ç—ã. \n'
                                                '–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.\n')
    await Mailing.mailing.set()


@dp.message_handler(state=Mailing.mailing)
async def mailing(message: types.Message, state: FSMContext):
    users = stat.get_user_list()
    await state.finish()
    for user in users:
        try:
            await bot.send_message(user, message.text)
        except BotBlocked:
            print(f'Bot was blocked by user with chat_id = {user}')
        except TelegramAPIError:
            print(f'Smth went wrong with user chat_id = {user}')
executor.start_polling(dp, skip_updates=True)
